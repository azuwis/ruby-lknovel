#!/usr/bin/ruby
# Encoding: utf-8

require 'erb'
require 'gepub'
require 'open-uri'
require 'pry'

class Volume
  attr_reader :url, :series, :author, :title, :number_s, :number, :date,
    :illustrator, :publisher, :intro, :chapters, :path

  def initialize(url)
    @url = url
    parse
  end

  def parse
    page = Nokogiri::HTML(open(@url))

    page_title = page.title.split(' - ')
    @series = page_title[0]
    @number_s = page_title[1]
    if /第(?<number>[.\d]+)卷/ =~ page_title[1]
      @number = number.to_f
    end

    @intro = page.css('strong:contains("内容简介") + p').text

    page.css('table.lk-book-detail td').each_slice(2) do |x|
      case x[0].text
      when /标 *题/
        @title = x[1].text.strip
      when /作 *者/
        @author = x[1].text.strip
      when /插 *画/
        @illustrator = x[1].text.strip
      when /文 *库/
        @publisher = x[1].text.strip
      when /更 *新/
        @date = x[1].text.strip
      end
    end

    @path = "#{@series} - #{@number_s} - #{@title}"

    @chapters = page.css('ul.lk-chapter-list li.span3').map do |x|
      chapter_title = x.text.strip.sub(/\s+/, ' ')
      chapter_url = URI.join(url, x.css('a')[0]['href']).to_s
      {:title => chapter_title, :url => chapter_url}
    end
  end
end

class Chapter
  attr_reader :url, :title, :content

  def self.to_file(uri)
    uri.path.split('/').last
  end

  def initialize(url)
    @url = url
    puts "parsing #{@url}"
    parse
  end

  def parse
    page = Nokogiri::HTML(open(@url))

    @title = page.css('li.active')[0].text.sub('章', '章 ').strip

    @content = []
    page.css('div#J_view').css('div.lk-view-line, br + br').each do |x|
      img = x.css('img[data-cover]')
      if x.name == 'br'
        @content.push('')
      elsif img.length > 0
        @content.push(URI.join(url, img[0]['data-cover']))
      else
        @content.push(x.text.chomp)
      end
    end
  end
end

def generate_epub(volume)
  builder = GEPUB::Builder.new {
    unique_identifier volume.url
    language 'zh'
    date Time.parse(volume.date + ' +0800')

    title volume.series
    collection volume.title, volume.number

    creator volume.author
    publisher volume.publisher
    contributor volume.illustrator, 'ill'

    resources(:workdir => volume.path) {
      cover_image Dir['images/*'].sort_by{|f| File.mtime(f)}.first
      glob 'images/*'
      ordered {
        volume.chapters.each_with_index do |c, i|
          file 'html/%03d.html' % i
          heading c[:title]
        end
      }
    }
  }

  builder.generate_epub("#{volume.path}.epub")
end

def download_image(url, file)
  File.open(file, 'wb') do |w|
    open(url, 'rb') do |r|
      w.write(r.read)
    end
  end
end

url = ARGV[0]

volume = Volume.new(url)

FileUtils.mkdir_p(File.join(volume.path, 'html'))
FileUtils.mkdir_p(File.join(volume.path, 'images'))
template = ERB.new(File.read('templates/chapter.html.erb'), nil, '-')
volume.chapters.each_with_index do |c, i|
  html_file = File.join(volume.path, 'html', '%03d.html' % i)
  if !File.exists?(html_file)
    chapter = Chapter.new(c[:url])
    chapter.content.each do |item|
      if item.is_a?(URI::HTTP)
        image_file = File.join(volume.path, 'images', Chapter.to_file(item))
        if !File.exists?(image_file)
          download_image(item, image_file)
        end
      end
    end
    html_content = template.result(binding)
    File.open(html_file, 'w') do |file|
      file.puts html_content
    end
  end
end

generate_epub(volume)
